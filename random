// n3742: Three <random>-related Proposals, v2

// Additions to <algorithm>

// Code from paper.  These are from SGI code and we might have them in ext.

   template<typename _PopIter, typename _SampleIter, typename _Size,
	    typename _URNG = decltype(global_urng())>
     inline _SampleIter
     sample(_PopIter __first, _PopIter __last, _SampleIter __out, _Size __n, _URNG&& __g)
     {
       using __pop_t = typename std::iterator_traits<_PopIter>::iterator_category;
       using __samp_t = typename std::iterator_traits<_SampleIter>::iterator_category;
       return __sample(__first, __last, __pop_t{}, __out, __samp_t{}, __n,
		       std::forward<_URNG>(__g));
     }

    template<class _PopIter, class _SampleIter, class _Size, class _URNG>
      SampleIter
      __sample(_PopIter __first, _PopIter __last, std::input_iterator_tag,
	       _SampleIter __out, std::random_access_iterator_tag,
	       _Size __n, _URNG&& __g)
      {
	using __dist_t = std::uniform_int_distribution<Size>;
	__dist_t _d{};
	_Size __sample_sz{};
	while (__first != __last && __sample_sz != __n)
	  __out[__sample_sz++] = *__first++;
	for (_Size __pop_sz{__sample_sz}; __first != __last; ++__first, ++__pop_sz )
	  {
	    using __param_t = typename __dist_t::param_type;
	    __param_t const __p{0, __pop_sz};
	    Size __k{__d(__g, __p)};
	    if (__k < __n)
	      __out[__k] = *__first;
	  }
        return __out + __sample_sz;
      }

    template<class _PopIter, class _SampleIter, class _Size, class _URNG>
      SampleIter
      __sample(_PopIter __first, _PopIter __last, std::forward_iterator_tag,
	       _SampleIter __out, std::output_iterator_tag,
	       _Size __n, _URNG&& __g)
      {
	using __dist_t = std::uniform_int_distribution<_Size>;
	__dist_t __d{};
	_Size __unsampled_sz = std::distance(__first, __last);
	for (__n = std::min(__n, __unsampled_sz); __n != 0; ++__first)
	  {
	    using __param_t = typename __dist_t::param_type;
	    __param_t const __p{0, --__unsampled_sz};
	    if (__d(__g, __p) < __n )
	      *__out++ = *__first, --__n;
	  }
	return __out;
      }


// Additions to <random>:

// Could the function static variables be thread_local?  Is there an advantage?

  inline auto&
  global_urng()
  {
    static std::default_random_engine __urng{};

    return __urng;
  }

  inline void
  randomize()
  {
    static std::random_device __rd{};

    global_urng().seed(__rd());
  }

  inline int
  pick_a_number(int __from, int __thru)
  {
    static std::uniform_int_distribution<> __uid{};

    using __parm_t = decltype(__uid)::param_type;

    return __uid(global_urng(), __parm_t{__from, __thru});
  }

  inline double
  pick_a_number(double __from, double __upto)
  {
    static std::uniform_real_distribution<> __urd{};

    using __parm_t = decltype(urd)::param_type;

    return __urd(global_urng(), __parm_t{__from, __upto});
  }


//  There is more in algorithms I think...

  // Replace the C++11 shuffle declaration with this declaration (adds defaults).
  template<class RandomAccessIterator,
           class UniformRandomNumberGenerator = decltype(global_urng())>
    void shuffle(RandomAccessIterator first, RandomAccessIterator last,
                 UniformRandomNumberGenerator&& g = global_urng());
