// 

// Newer linuxen and windowsen have htonll and ntohll.  Maybe not POSIX.

#ifndef _GLIBCXX_NET
#define _GLIBCXX_NET 1

#pragma GCC system_header

#if __cplusplus <= 201103L
# include <bits/c++14_warning.h>
#else

#include <cstdint>
#include <arpa/inet.h>

#ifdef _GLIBCXX_USE_C99_STDINT_TR1

namespace std
{
namespace experimental
{
namespace net
{

  constexpr uint32_t
  htonl(uint32_t __host) noexcept
  { return ::htonl(__host); }

  constexpr uint16_t
  htons(uint16_t __host) noexcept
  { return ::htons(__host); }

  template<typename _Tp>
    constexpr _Tp
    hton(_Tp) noexcept = delete;

  template<>
    constexpr uint8_t
    hton(uint8_t __host) noexcept
    { return __host; }

  template<>
    constexpr uint16_t
    hton(uint16_t __host) noexcept
    { return htons(__host); }

  template<>
    constexpr uint32_t
    hton(uint32_t __host) noexcept
    { return htonl(__host); }

  template<>
    constexpr uint64_t
    hton(uint64_t __host) noexcept
    { return htonll(__host); } // Should we have this up above?

  constexpr uint32_t
  ntohl(uint32_t __network) noexcept
  { return ::ntohl(__network); }

  constexpr uint16_t
  ntohs(uint16_t __network) noexcept
  { return ::ntohs(__network); }

  template<typename _Tp>
    constexpr _Tp
    ntoh(_Tp) noexcept = delete;

  template<>
    constexpr uint8_t
    ntoh(uint8_t __network) noexcept
    { return __network; }

  template<>
    constexpr uint16_t
    ntoh(uint16_t __network) noexcept
    { return ntohs(__network); }

  template<>
    constexpr uint32_t
    ntoh(uint32_t __network) noexcept
    { return ntohl(__network); }

  template<>
    constexpr uint64_t
    ntoh(uint64_t __network) noexcept
    { return ntohll(__network); } // Should we have this up above?

} // namespace net
} // namespace experimental
} // namespace std

#endif // _GLIBCXX_USE_C99_STDINT_TR1

#endif // C++11

#endif // _GLIBCXX_NET
