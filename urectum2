Index: c-family/c-common.c
===================================================================
--- c-family/c-common.c	(revision 214270)
+++ c-family/c-common.c	(working copy)
@@ -461,6 +461,7 @@
   { "__has_trivial_copy", RID_HAS_TRIVIAL_COPY, D_CXXONLY },
   { "__has_trivial_destructor", RID_HAS_TRIVIAL_DESTRUCTOR, D_CXXONLY },
   { "__has_virtual_destructor", RID_HAS_VIRTUAL_DESTRUCTOR, D_CXXONLY },
+  { "__has_attribute",	RID_HAS_ATTRIBUTE, D_CXXONLY },
   { "__imag",		RID_IMAGPART,	0 },
   { "__imag__",		RID_IMAGPART,	0 },
   { "__inline",		RID_INLINE,	0 },
Index: c-family/c-common.h
===================================================================
--- c-family/c-common.h	(revision 214270)
+++ c-family/c-common.h	(working copy)
@@ -148,6 +148,9 @@
   /* C++11 */
   RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,
 
+  /* C++ SD-6 */
+  RID_HAS_ATTRIBUTE,
+
   /* Cilk Plus keywords.  */
   RID_CILK_SPAWN, RID_CILK_SYNC,
   
Index: cp/parser.c
===================================================================
--- cp/parser.c	(revision 214270)
+++ cp/parser.c	(working copy)
@@ -237,6 +237,9 @@
 static tree cp_literal_operator_id
   (const char *);
 
+static tree cp_parser_builtin_has_attribute
+  (cp_parser *);
+
 static void cp_parser_cilk_simd
   (cp_parser *, cp_token *);
 static bool cp_parser_omp_declare_reduction_exprs
@@ -4489,6 +4492,9 @@
 	case RID_IS_UNION:
 	  return cp_parser_trait_expr (parser, token->keyword);
 
+	case RID_HAS_ATTRIBUTE:
+	  return cp_parser_builtin_has_attribute(parser);
+
 	/* Objective-C++ expressions.  */
 	case RID_AT_ENCODE:
 	case RID_AT_PROTOCOL:
@@ -8643,6 +8649,26 @@
   return expr;
 }
 
+/*   */
+static tree
+cp_parser_builtin_has_attribute(cp_parser *parser)
+{
+  /* Consume the "__has_attribute" token.  */
+  cp_lexer_consume_token (parser->lexer);
+  /* Consume the opening `('.  */
+  cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);
+
+  tree attr = cp_parser_std_attribute (parser);
+
+  /* Consume the closing `)'.  */
+  cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);
+
+  if (attr == error_mark_node)
+    return boolean_false_node;
+  else
+    return boolean_true_node;
+}
+
 /* Parse a trait expression.
 
    Returns a representation of the expression, the underlying type
