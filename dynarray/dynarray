// Components for manipulating sequences of objects where the size is fixed
// at construction. -*- C++ -*-

// Copyright (C) 2014 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file experimental/dynarray
 *  This is a Standard C++ Library header.
 */

//
// N3820 dynarray library
//

#ifndef _GLIBCXX_EXPERIMENTAL_DYNARRAY
#define _GLIBCXX_EXPERIMENTAL_DYNARRAY 1

#pragma GCC system_header

#if __cplusplus <= 201103L
# include <bits/c++14_warning.h>
#else

#include <stdexcept>
#include <memory>
//#include <new> // For bad_array_length
#include <limits> // For numeric_limits

#define USE_ALLOCA 1

namespace std {

  template<typename _Tp> // DefaultConstructible _Tp
    struct dynarray
    {
      // types:
      using value_type             = _Tp;
      using reference              = _Tp&;
      using const_reference        = const _Tp&;
      using pointer                = _Tp*;
      using const_pointer          = const _Tp*;
      using iterator               = _Tp*;
      using const_iterator         = const _Tp*;
      using reverse_iterator       = std::reverse_iterator<iterator>;
      using const_reverse_iterator = std::reverse_iterator<const_iterator>;
      using size_type              = size_t;
      using difference_type        = ptrdiff_t;

    private:

      // fields:
      const size_type _M_size;
      pointer         _M_data;

      // helper functions:
      void
      _M_check(size_type __num)
      {
	if (__num >= this->_M_size)
	  //throw std::out_of_range("dynarray");
          std::__throw_out_of_range_fmt(__N("dynarray::at: num (which is %zu) "
					    ">= size() (which is %zu)"),
					    __num, this->_M_size);
      }

      [[gnu::always_inline]]
      pointer
      _M_allocate(size_type __num)
      {
        if (__num >= std::numeric_limits<size_type>::max() / sizeof(value_type))
	  throw std::bad_array_length();
	size_type __size = __num * sizeof(value_type);
#ifdef USE_ALLOCA
	return reinterpret_cast<pointer>(alloca(__size));
#else
	return reinterpret_cast<pointer>(new char[__size]);
#endif
      }

      void
      _M_deallocate()
      {
#ifndef USE_ALLOCA
	delete[] this->_M_data;
#endif
      }

      dynarray() = delete;

    protected:

      // Prevent allocation of scalar objects
      static void * operator new(size_t);

      // Prevent allocation of array of objects
      static void * operator new [] (size_t);  // #2: To prevent allocation of array of objects

    public:

      // construct and destruct:
      [[gnu::always_inline]]
      explicit dynarray(size_type __num)
      : _M_size{__num},
	_M_data{this->_M_allocate(__num)}
      { std::__uninitialized_default_n(this->_M_data, this->_M_size); }

      template<typename _Alloc>
	[[gnu::always_inline]]
	dynarray(size_type __num, const _Alloc& __alloc)
	: _M_size{__num},
	  _M_data{this->_M_allocate(__num)}
	{
	  size_type __i;
	  try
	  {
	    for (__i = 0; __i < this->_M_size; ++__i)
	      __alloc.construct(this->_M_data + __i, value_type());
	  }
	  catch (...)
	  {
	    std::_Destroy(this->begin(), this->begin() + __i);
	    __throw_exception_again;
	  }
	}

      [[gnu::always_inline]]
      dynarray(size_type __num, const value_type& __val)
      : _M_size{__num},
	_M_data{this->_M_allocate(__num)}
      { std::uninitialized_fill_n(this->_M_data, this->_M_size, __val); }

      template<typename _Alloc>
	[[gnu::always_inline]]
	dynarray(size_type __num, const _Tp& __val, const _Alloc& __alloc)
	: _M_size{__num},
	  _M_data{this->_M_allocate(__num)}
	{
	  size_type __i;
	  try
	  {
	    for (__i = 0; __i < this->_M_size; ++__i)
	      __alloc.construct(this->_M_data + __i, __val);
	  }
	  catch (...)
	  {
	    std::_Destroy(this->begin(), this->begin() + __i);
	    __throw_exception_again;
	  }
	}

      [[gnu::always_inline]]
      dynarray(const dynarray& __dyna)
      : _M_size{__dyna._M_size},
	_M_data{_M_allocate(__dyna._M_size)}
      { std::uninitialized_copy(__dyna.begin(), __dyna.end(), this->begin()); }

      template<typename _Alloc>
	[[gnu::always_inline]]
	dynarray(const dynarray& __dyna, const _Alloc& __alloc)
	: _M_size{__dyna._M_size},
	  _M_data{_M_allocate(__dyna._M_size)}
        {
	  size_type __i;
	  try
	  {
	    for (__i = 0; __i < this->_M_size; ++__i)
              __alloc.construct(this->_M_data + __i, __dyna[__i]);
	  }
	  catch (...)
	  {
	    std::_Destroy(this->begin(), this->begin() + __i);
	    __throw_exception_again;
	  }
        }

      [[gnu::always_inline]]
      dynarray(initializer_list<value_type> __il)
      : _M_size{__il.size()},
	_M_data{_M_allocate(__il.size())}
      { std::uninitialized_copy(__il.begin(), __il.end(), this->begin()); }

      template<typename _Alloc>
	[[gnu::always_inline]]
	dynarray(std::initializer_list<value_type> __il, const _Alloc& __alloc)
	: _M_size{__il.size()},
	  _M_data{_M_allocate(__il.size())}
	{
	  size_type __i;
	  try
	  {
	    auto __src = __il.begin();
	    for (size_type __i = 0; __i < this->_M_size; ++__i, ++__src)
	      __alloc.construct(this->_M_data + __i, *__src);
	  }
	  catch (...)
	  {
	    std::_Destroy(this->begin(), this->begin() + __i);
	    __throw_exception_again;
	  }
	}

      ~dynarray()
      {
	std::_Destroy(this->begin(), this->end());
	_M_deallocate();
      }

      const dynarray operator=(const dynarray&) = delete;

      // iterators:
      iterator
      begin() noexcept
      { return this->_M_data; }

      const_iterator
      begin() const noexcept
      { return this->_M_data; }

      const_iterator
      cbegin() const noexcept
      { return this->_M_data; }

      iterator
      end() noexcept
      { return this->_M_data + this->_M_size; }

      const_iterator
      end() const noexcept
      { return this->_M_data + this->_M_size; }

      const_iterator
      cend() const noexcept
      { return this->_M_data + this->_M_size; }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }

      reverse_iterator
      rend()  noexcept
      { return reverse_iterator(this->begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }

      // capacity:
      size_type
      size() const noexcept
      { return this->_M_size; }

      size_type
      max_size() const noexcept
      { return this->_M_size; }

      bool
      empty() const noexcept
      { return this->_M_size == 0; }

      // element access:
      reference
      operator[](size_type __n)
      { return this->_M_data[__n]; }

      const_reference
      operator[](size_type __n) const
      { return this->_M_data[__n]; }

      reference
      front()
      { return this->_M_data[0]; }

      const_reference
      front() const
      { return this->_M_data[0]; }

      reference
      back()
      { return this->_M_data[this->_M_size - 1]; }

      const_reference
      back() const
      { return this->_M_data[this->_M_size - 1]; }

      const_reference
      at(size_type __n) const
      {
	this->_M_check(__n);
	return this->_M_data[__n];
      }

      reference
      at(size_type __n)
      {
	this->_M_check(__n);
	return this->_M_data[__n];
      }

      // data access:
      pointer
      data() noexcept
      { return this->_M_data; }

      const_pointer
      data() const noexcept
      { return this->_M_data; }

      // mutating member functions:
      void
      fill(const value_type& __val)
      { std::fill(this->begin(), this->end(), __val); }
    };

  template<typename _Tp, typename _Alloc>
    struct uses_allocator<dynarray<_Tp>, _Alloc> : true_type { };

  template<typename _Tp>
    bool
    operator==(const dynarray<_Tp>& __lhs,
	       const dynarray<_Tp>& __rhs)
    {
      return std::equal(__lhs.begin(), __lhs.end(),
			__rhs.begin(), __rhs.end());
    }

  template<typename _Tp>
    bool
    operator!=(const dynarray<_Tp>& __lhs,
	       const dynarray<_Tp>& __rhs)
    { return !(__lhs == __rhs); }

  template<typename _Tp>
    bool
    operator<(const dynarray<_Tp>& __lhs,
	      const dynarray<_Tp>& __rhs)
    {
      return std::lexicographical_compare(__lhs.begin(), __lhs.end(),
					  __rhs.begin(), __rhs.end());
    }

  template<typename _Tp>
    bool
    operator<=(const dynarray<_Tp>& __lhs,
	       const dynarray<_Tp>& __rhs)
    { return !(__rhs < __lhs); }

  template<typename _Tp>
    bool
    operator>(const dynarray<_Tp>& __lhs,
	      const dynarray<_Tp>& __rhs)
    { return __rhs < __lhs; }

  template<typename _Tp>
    bool
    operator>=(const dynarray<_Tp>& __lhs,
	       const dynarray<_Tp>& __rhs)
    { return !(__lhs < __rhs); }

} // namespace std

#endif // __cplusplus <= 201103L

#endif // _GLIBCXX_EXPERIMENTAL_DYNARRAY

