Index: cp/cp-tree.h
===================================================================
--- cp/cp-tree.h	(revision 205641)
+++ cp/cp-tree.h	(working copy)
@@ -6090,7 +6090,7 @@
                                                  tsubst_flags_t);
 extern void check_template_keyword		(tree);
 extern bool check_raw_literal_operator		(const_tree decl);
-extern bool check_literal_operator_args		(const_tree, bool *, bool *);
+extern bool check_literal_operator_args		(const_tree, bool *, bool *, bool *);
 extern void maybe_warn_about_useless_cast       (tree, tree, tsubst_flags_t);
 extern tree cp_perform_integral_promotions      (tree, tsubst_flags_t);
 
Index: cp/decl.c
===================================================================
--- cp/decl.c	(revision 205641)
+++ cp/decl.c	(working copy)
@@ -7618,6 +7618,7 @@
     return NULL_TREE;
   else if (UDLIT_OPER_P (DECL_NAME (decl)))
     {
+      bool default_arg_p;
       bool long_long_unsigned_p;
       bool long_double_p;
       const char *suffix = NULL;
@@ -7630,10 +7631,13 @@
 
       if (DECL_NAMESPACE_SCOPE_P (decl))
 	{
-	  if (!check_literal_operator_args (decl, &long_long_unsigned_p,
+	  if (!check_literal_operator_args (decl, &default_arg_p,
+					    &long_long_unsigned_p,
 					    &long_double_p))
 	    {
 	      error ("%qD has invalid argument list", decl);
+	      if (default_arg_p)
+		inform (location_of (decl), "%qD has default argument(s)", decl);
 	      return NULL_TREE;
 	    }
 
Index: cp/typeck.c
===================================================================
--- cp/typeck.c	(revision 205641)
+++ cp/typeck.c	(working copy)
@@ -9061,15 +9061,20 @@
    argument types.  */
 
 bool
-check_literal_operator_args (const_tree decl,
+check_literal_operator_args (const_tree decl, bool *default_arg_p,
 			     bool *long_long_unsigned_p, bool *long_double_p)
 {
   tree argtypes = TYPE_ARG_TYPES (TREE_TYPE (decl));
 
+  *default_arg_p = false;
   *long_long_unsigned_p = false;
   *long_double_p = false;
   if (processing_template_decl || processing_specialization)
-    return argtypes == void_list_node;
+    {
+      if (argtypes && argtypes != void_list_node && TREE_PURPOSE (argtypes))
+	*default_arg_p = true;
+      return argtypes == void_list_node;
+    }
   else
     {
       tree argtype;
@@ -9081,6 +9086,9 @@
 	   argtype && argtype != void_list_node;
 	   argtype = TREE_CHAIN (argtype))
 	{
+	  if (TREE_PURPOSE (argtype))
+	    *default_arg_p = true;
+
 	  tree t = TREE_VALUE (argtype);
 	  ++arity;
 
@@ -9099,6 +9107,8 @@
 		  argtype = TREE_CHAIN (argtype);
 		  if (!argtype)
 		    return false;
+		  if (TREE_PURPOSE (argtype))
+		    *default_arg_p = true;
 		  t = TREE_VALUE (argtype);
 		  if (maybe_raw_p && argtype == void_list_node)
 		    return true;
@@ -9135,6 +9145,9 @@
       if (!argtype)
 	return false; /* Found ellipsis.  */
 
+      if (*default_arg_p)
+	return false;
+
       if (arity != max_arity)
 	return false;
 
Index: testsuite/g++.dg/cpp0x/udlit-default-arg-neg.C
===================================================================
--- testsuite/g++.dg/cpp0x/udlit-default-arg-neg.C	(revision 0)
+++ testsuite/g++.dg/cpp0x/udlit-default-arg-neg.C	(revision 0)
@@ -0,0 +1,48 @@
+// { dg-options -std=c++11 }
+
+int
+operator""_a(const char *, std::size_t = 0) // { dg-error "has default argument" }
+{
+  return 1;
+}
+
+int
+operator""_a(const char *)
+{
+  return 2;
+}
+
+int
+operator""_fld(long double x, int m = 1) // { dg-error "has default argument" }
+{
+  return m * static_cast<int>(x + 1.0L);
+}
+
+int
+operator""_full(unsigned long long n, int m = 1) // { dg-error "has default argument" }
+{
+  return m * static_cast<int>(n + 1ULL);
+}
+
+template<char..._Str>
+  int
+  operator""_foo(unsigned long long n = 0) // { dg-error "has default argument" }
+  {
+    return 0 + sizeof...(_Str);
+  }
+
+int
+main()
+{
+  int i = 123_a; // OK, not ambiguous.
+  int j = operator""_a("123"); // OK, not ambiguous.
+
+  1.0_fld; // { dg-error "unable to find numeric literal operator" }
+  1_full; // { dg-error "unable to find numeric literal operator" }
+  123456789_foo; // { dg-error "unable to find numeric literal operator" }
+}
+
+// { dg-error "has invalid argument list" "has invalid argument list" { target *-*-* } 4 }
+// { dg-error "has invalid argument list" "has invalid argument list" { target *-*-* } 16 }
+// { dg-error "has invalid argument list" "has invalid argument list" { target *-*-* } 22 }
+// { dg-error "has invalid argument list" "has invalid argument list" { target *-*-* } 29 }
