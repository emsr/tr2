// D3933 - A compile-time string library template with UDL operator templates

template<typename _CharT, _CharT... _Chars>
  class basic_string_literal;

template<typename _CharT, _CharT... _Chars>
  constexpr basic_string_literal<_CharT, _Chars...> operator""S();

template<typename _CharT, _CharT... _Chars>
  class basic_string_literal
  {
    friend constexpr basic_string_literal operator""S<_CharT, _HeadChar, _TailChars...>();

  public:

    static constexpr const _CharT data_[]{_HeadChar, _TailChars..., '\0'};

  private:

    constexpr basic_string_literal() = default;

  public:

    using value_type = _CharT;
    using size_type = std::size_t;
    using difference_type = std::size_t;
    // iterator types???

    using tail_type = basic_string_literal<_CharT>;
    //using reverse_type = basic_string_literal<_CharT>;

    // Size-related functions
    constexpr size_type size() const;
    constexpr size_type length() const;
    constexpr bool empty() const;

    // Element accessor functions
    constexpr _CharT operator[](size_type pos) const;
    template<size_type Index> constexpr _CharT at() const;
    constexpr _CharT at(size_type pos) const;
    constexpr _CharT back() const;
    constexpr _CharT front() const;

    // Search functions
    template<_CharT... _OtherChars>
    constexpr size_type find(const basic_string_literal<_CharT, _OtherChars...>& str, size_type pos = 0) const;
    constexpr size_type find(const _CharT* s, size_type pos, size_type count) const;
    constexpr size_type find(const _CharT* s, size_type pos = 0) const;
    constexpr size_type find(_CharT ch, size_type pos = 0) const;

    template<_CharT... _OtherChars>
    constexpr size_type rfind(const basic_string_literal<_CharT, _OtherChars...>& str, std::size_t pos = sizeof...(_Chars)) const;
    constexpr size_type rfind(const _CharT* s, size_type pos, size_type count) const;
    constexpr size_type rfind(const _CharT* s, size_type pos = sizeof...(_Chars)) const;
    constexpr size_type rfind(_CharT ch, size_t pos = sizeof...(_Chars)) const;

    template<_CharT... _OtherChars>
    constexpr size_type find_first_of(const basic_string_literal<_CharT, _OtherChars...>& str, size_type pos = 0) const;
    constexpr size_type find_first_of(const _CharT* s, size_type pos, size_type count) const;
    constexpr size_type find_first_of(const _CharT* s, size_type pos = 0) const;
    constexpr size_type find_first_of(_CharT ch, size_type pos = 0) const;

    template<_CharT... _OtherChars>
    constexpr size_type find_first_not_of(const basic_string_literal<_CharT, _OtherChars...>& str, size_type pos = 0) const;
    constexpr size_type find_first_not_of(const _CharT* s, size_type pos, size_type count) const;
    constexpr size_type find_first_not_of(const _CharT* s, size_type pos = 0) const;
    constexpr size_type find_first_not_of(_CharT ch, size_type pos = 0) const;

    template<_CharT... _OtherChars>
    constexpr size_type find_last_of(const basic_string_literal<_CharT, _OtherChars...>& str, size_type pos = sizeof...(_Chars)) const;
    constexpr size_type find_last_of(const _CharT* s, size_type pos, size_type count) const;
    constexpr size_type find_last_of(const _CharT* s, size_type pos = sizeof...(_Chars)) const;
    constexpr size_type find_last_of(_CharT ch, size_t pos = sizeof...(_Chars)) const;

    template<_CharT... _OtherChars>
    constexpr size_type find_last_not_of(const basic_string_literal<_CharT, _OtherChars...>& str, size_type pos = sizeof...(_Chars)) const;
    constexpr size_type find_last_not_of(const _CharT* s, size_type pos, size_type count) const;
    constexpr size_type find_last_not_of(const _CharT* s, size_type pos = sizeof...(_Chars)) const;
    constexpr size_type find_last_not_of(_CharT ch, size_t pos = sizeof...(_Chars)) const;

    // Substring function
    /* TODO: return type */ substr(size_type pos = 0, size_type count = std::string::npos) const;
    /* TODO: this return type might require using a recursive structure */

    // Comparison functions
    template<_CharT... _OtherChars>;
    constexpr int compare(const basic_string_literal<_CharT, _OtherChars...> & other) const;

    constexpr int compare(const basic_string& str) const;
    constexpr int compare(size_type pos1, size_type count1, const basic_string& str) const;
    constexpr int compare(size_type pos1, size_type count1, const basic_string& str,
                          size_type pos2, size_type count2) const;
    constexpr int compare(const _CharT* s) const;
    constexpr int compare(size_type pos1, size_type count1, const _CharT* s) const;
    constexpr int compare(size_type pos1, size_type count1,
                          const _CharT* s, size_type count2) const;

    // Conversion functions
    constexpr const char * c_str() const;
    constexpr const char * data() const;
    std::string to_string() const;
    constexpr operator const char*() const;
    constexpr long long to_number() const;
  };

template<typename _CharT>
  class basic_string_literal<_CharT>
  {

    template<typename charU>
    friend constexpr basic_string_literal operator ""S<charU>();

  private:

    static constexpr const _CharT _data[]{'\0'};

    constexpr basic_string_literal() = default;

  public:

    using value_type = _CharT;
    using size_type = std::size_t;
    using difference_type = std::size_t;
    // iterator types???

    using tail_type = basic_string_literal<_CharT>;
    //using reverse_type = basic_string_literal<_CharT>;

    constexpr size_type size() const;
    constexpr size_type length() const;
    constexpr bool empty() const;

    // There are no accessors for empty strings

    // There are no search functions for empty strings

    // There are no substring functions for empty strings

    template<_CharT... _OtherChars>
    constexpr int compare(const basic_string_literal<_CharT, _OtherChars...>& other) const;
    constexpr int compare(const basic_string<_CharT>& str) const;
    constexpr int compare(std::size_t pos1, std::size_t count1, const basic_string<_CharT>& str) const;
    constexpr int compare(std::size_t pos1, std::size_t count1, const basic_string<_CharT>& str, std::size_t pos2, std::size_t count2) const;
    constexpr int compare(const _CharT* s) const;
    constexpr int compare(std::size_t pos1, std::size_t count1, const _CharT* s) const;
    constexpr int compare(std::size_t pos1, std::size_t count1, const _CharT* s, std::size_t count2) const;

    constexpr const char * c_str() const;
    constexpr const char * data() const;
    std::string to_string() const;
    constexpr size_type to_number() const;
    constexpr operator const char*() const;
    operator std::string() const;
  };

template<typename _CharT, _CharT... _Chars>
  constexpr basic_string_literal<_CharT, _Chars...> operator""S()
  { return basic_string_literal<_CharT, _Chars...>(); }

// Concatenation

template<typename _CharT, _CharT... _LeftChars, _CharT... _RightChars>
  inline constexpr auto
  operator+(const basic_string_literal<_CharT, _LeftChars...>& l,
            const basic_string_literal<_CharT, _RightChars...>& r)
  -> basic_string_literal<_CharT, _LeftChars..., _RightChars...>;

// Relational operators

template<typename _CharT, _CharT... _OtherChars>
  constexpr bool
  operator==(const basic_string_literal<_CharT, _OtherChars...>& lhs,
             const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>
  constexpr bool
  operator!=(const basic_string_literal<_CharT, _OtherChars...>& lhs,
             const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>
  constexpr bool
  operator<(const basic_string_literal<_CharT, >OtherChars...>& lhs,
            const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>
  constexpr bool
  operator<=(const basic_string_literal<_CharT, _OtherChars...>& lhs,
             const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>
  constexpr bool
  operator>(const basic_string_literal<_CharT, _OtherChars...>& lhs,
            const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>
  constexpr bool
  operator>=(const basic_string_literal<_CharT, _OtherChars...>& lhs,
             const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>
  constexpr bool
  operator==(const _CharT* lhs,
	     const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>
  constexpr bool
  operator==(const basic_string_literal<_CharT, _OtherChars...>& lhs,
	     const _CharT* rhs);

template<typename _CharT, _CharT... _OtherChars...>
  constexpr bool
  operator!=(const _CharT* lhs,
	     const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>;
  constexpr bool
  operator!=(const basic_string_literal<_CharT, _OtherChars...>& lhs,
	     const _CharT* rhs);

template<typename _CharT, _CharT... _OtherChars>;
  constexpr bool
  operator<(const _CharT* lhs,
	    const basic_string_literal<_CharT, _OtherChars...>& rhs);

template<typename _CharT, _CharT... _OtherChars>;
  constexpr bool
  operator<(const basic_string_literal<_CharT, _OtherChars...>& lhs,
	    const _CharT* rhs);
template<typename _CharT, _CharT... _OtherChars>;
  constexpr bool
  operator<=(const _CharT* lhs,
	     const basic_string_literal<_CharT, _OtherChars...>& rhs);
template<typename _CharT, _CharT... _OtherChars>;
  constexpr bool
  operator<<=(const basic_string<_CharT, _Traits, _Alloc>& lhs, const _CharT* rhs);

template<typename _CharT, _CharT... _OtherChars>;
  constexpr bool
  operator>(const _CharT* lhs, const basic_string<_CharT,Traits,Alloc>& rhs);

template<typename _CharT, _CharT... _OtherChars>;
  constexpr bool
  operator>(const basic_string<_CharT,Traits,Alloc>& lhs, const _CharT* lhs);

template<typename _CharT, _CharT... _OtherChars>;
  constexpr bool
  operator>=(const _CharT* lhs, const basic_string<_CharT,Traits,Alloc>& rhs);

template<typename CharT, class _Traits, class _Alloc>
  constexpr bool
  operator>=(const basic_string<_CharT, _Traits, Alloc>& lhs, const _CharT* rhs);

// Stream inseration operator

template<typename _CharT, _CharT... _Chars>
  inline std::ostream&
  operator<<(std::ostream& os,
             const basic_string_literal<_CharT, _Chars...>& str);

// Literal operator

template <typename _CharT, _CharT... _Chars>
  inline constexpr basic_string_literal<_CharT, _Chars...>
  operator""S();
