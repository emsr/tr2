// N4257 - Delimited iterators (Rev. 4)

#include <type_traits> // For decay_t

namespace std
{

  template<typename _DelimT, typename _CharT = char,
	   typename _Traits = char_traits<_CharT>>
    class ostream_joiner
    {
    public:
      using char_type		= _CharT;
      using traits_type		= _Traits;
      using ostream_type	= basic_ostream<_CharT, _Traits>;
      using iterator_category	= output_iterator_tag;
      using value_type		= void;
      using difference_type	= void;
      using pointer		= void;
      using reference		= void;

      ostream_joiner(ostream_type& __os, _DelimT&& __delim)
      : _M_os{&__os}, _M_delim{std::move(__delim)}, _M_first{true}
      { }

      ostream_joiner(ostream_type& __os, const _DelimT& __delim)
      : _M_os{&__os}, _M_delim{__delim}, _M_first{true}
      { }

      template<typename _Tp>
	ostream_joiner<_DelimT, _CharT, _Traits>&
	operator=(const _Tp& __value)
	{
	  if (!_M_first)
	    *_M_os << _M_delim;
	  _M_first = false;
	  *_M_os << __value;
	  return *this;
	}

      ostream_joiner<_DelimT, _CharT, _Traits>&
      operator*()
      { return *this; }

      ostream_joiner<_DelimT, _CharT, _Traits>&
      operator++()
      { return *this; }

      ostream_joiner<_DelimT, _CharT, _Traits>&
      operator++(int)
      { return *this; }

    private:
      basic_ostream<_CharT, _Traits>* _M_os;
      _DelimT _M_delim;
      bool _M_first;
    };

  template<typename _CharT, typename _Traits, typename _DelimT>
    ostream_joiner<decay_t<_DelimT>, _CharT, _Traits>
    make_ostream_joiner(basic_ostream<_CharT, _Traits>& __os,
			_DelimT&& __delim)
    {
      using __joiner_t = ostream_joiner<decay_t<_DelimT>, _CharT, _Traits>;
      return __joiner_t(__os, forward<_DelimT>(__delim));
    }

}
